" Roman Kuznetsov's profile settings

" Common Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_common" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Platform Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_platform" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" LaTex Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_latex" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Markdown Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_markdown" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Haskell Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_haskell" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" PlantUML Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_plantuml" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Mapping Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_mapping" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Environment {{{1
" by iMproved
set nocompatible

" Vundle {{{1
let s:rc_raw = expand("$HOME/vimfiles/bundle/vundle")
let s:rc = substitute(s:rc_raw, "\\", "/", "g")
let s:justCloned = 0
if !isdirectory(s:rc)
  execute ':silent !git clone https://github.com/gmarik/vundle.git "'.s:rc.'"'
  let s:justCloned = 1
endif
" setup runtime path to vundle
let &runtimepath.=','.s:rc
call vundle#rc()
" [ GENERAL ]
  Plugin 'gmarik/vundle'
  Plugin 'mbbill/fencview'
  Plugin 'Shougo/vimproc'
  Plugin 'scrooloose/nerdtree'
  Plugin 'L9'
  Plugin 'FuzzyFinder'
  Plugin 'bling/vim-bufferline'
  Plugin 'bling/vim-airline'
  Plugin 'derekmcloughlin/gvimfullscreen_win32'
" [ COLOR SCHEMES ]
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'kuznero/kuvim-themes'
" [ C# ]
  Plugin 'csharp.vim'
" [ PowerShell ]
  Plugin 'PProvost/vim-ps1'
" [ HASKELL ]
  Plugin 'neovimhaskell/haskell-vim'
  Plugin 'eagletmt/ghcmod-vim'
  Plugin 'eagletmt/neco-ghc'
  Plugin 'scrooloose/syntastic'
" [ PlantUML ]
  Plugin 'aklt/plantuml-syntax'
if s:justCloned == 1
  " Install all referenced bundles
  execute ':silent PluginInstall!'
endif

" General {{{1
" enable filetype detection, plus loading of filetype plugins
filetype plugin indent on
" automatically enable mouse usage
set mouse=a
" setup various encodings
" scriptencoding utf-8
set encoding=utf-8
set fileencodings=utf-8
" store bigger history (default is 20)
set history=1000
" disable spell checking
set nospell
" set spell spelllang=en
" disable backups
set nobackup
" disable swap files
set noswapfile
" disable undo files
set noundofile
" text width
set textwidth=99
set colorcolumn=100
" open new buffers to the right and below current buffer
set splitright
set splitbelow

" UI {{{1
" gui specific settings
if has("gui_running")
  " enable current line highlight
  set cursorline
  " startup maximized
  "au GUIEnter * simalt ~x
  " set window size explicitly
  set columns=140
  set lines=35
  " remove menu bar
  set guioptions-=m
  " remove toolbar
  set guioptions-=T
  " remove scroll bars
  set guioptions-=r
  set guioptions-=L
endif
" display the current mode
set showmode
" always show status line
set laststatus=2
" backspace for dummys
set backspace=indent,eol,start
" no extra spaces between rows
set linespace=1
" line numbers on
set number
" show matching brackets/parenthesis
set showmatch
" find as you type search
set incsearch
" highlight search terms
set hlsearch
" case insensitive search
set ignorecase
" case sensitive when uc present
set smartcase
" fold method
set foldmethod=marker
" auto fold enabled
set nofoldenable
" do not show list characters
set nolist
" highlight problematic whitespace
"set listchars=eol:$,tab:>-,trail:.,extends:#,nbsp:.
if has("gui_running")
  set listchars=tab:>-,trail:.,extends:#,nbsp:.,eol:Â¬
else
  set listchars=tab:>-,trail:.,extends:#,nbsp:.
endif
"set linebreak
"set showbreak=>>

" Formatting {{{1
" wrap long lines
set nowrap
" indent at the same level of the previous line
set autoindent
" enable smart indent
set smartindent
" use indents of 2 spaces
set shiftwidth=2
" tabs are spaces, not tabs
set expandtab
" an indentation every second columns
set tabstop=2
" let backspace delete indent
set softtabstop=2

" Diff {{{1
" disregard whitespaces on file diff
" set diffopt+=iwhite

" Style Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_style" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

