filetype plugin indent on

" [ neovimhaskell/haskell-vim ] {{{1

" to enable highlighting of forall
let g:haskell_enable_quantification = 1
" to enable highlighting of mdo and rec
let g:haskell_enable_recursivedo = 1
" to enable highlighting of proc
let g:haskell_enable_arrowsyntax = 1
" to enable highlighting of pattern
let g:haskell_enable_pattern_synonyms = 1
" to enable highlighting of type roles
let g:haskell_enable_typeroles = 1
" to enable highlighting of static
let g:haskell_enable_static_pointers = 1

" indentation
let g:haskell_indent_if = 3
let g:haskell_indent_case = 2
let g:haskell_indent_let = 4
let g:haskell_indent_where = 6
let g:haskell_indent_do = 3
let g:haskell_indent_in = 1
let g:cabal_indent_section = 2

" [ eagletmt/ghcmod-vim ] {{{1

au BufEnter *.hs nnoremap <leader>st :GhcModType<CR>
au BufEnter *.hs nnoremap <leader>ct :GhcModTypeClear<CR>
au BufEnter *.hs nnoremap <leader>it :GhcModTypeInsert<CR>
au BufEnter *.hs nnoremap <leader>si :GhcModInfo<CR>
au BufEnter *.hs nnoremap <leader>pi :GhcModInfoPreview<CR>
au BufEnter *.hs nnoremap <leader>c :GhcModCheck<CR>
au BufEnter *.hs nnoremap <leader>l :GhcModLint<CR>

" If you'd like to give GHC options, set g:ghcmod_ghc_options.
" let g:ghcmod_ghc_options = ['-idir1', '-idir2']

" :GhcModType
" :GhcModTypeClear

" Sub-expressions are highlighted as Search by default.
" hi ghcmodType ctermbg=yellow
" let g:ghcmod_type_highlight = 'ghcmodType'

" :GhcModCheck
" :GhcModLint

" If you'd like to pass options to hlint, set g:ghcmod_hlint_options.
" let g:ghcmod_hlint_options = ['--ignore=Redundant $']

" You can run check and/or lint asynchronously. This would be useful when you'd like to run check
" and/or lint automatically (especially on BufWritePost).

" :GhcModCheckAsync
" :GhcModLintAsync
" :GhcModCheckAndLintAsync

" You can see the expansion of splices by :GhcModExpand and they are available in quickfix window.

" :GhcModExpand

" [ eagletmt/neco-ghc ] {{{1

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc=0
" Very useful, but can make it rather slow
let g:necoghc_enable_detailed_browse=1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" [ scrooloose/syntastic ] {{{1

if has( "gui_running" )
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endif

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

map <silent> <Leader>e :Errors<CR>
map <Leader>s :SyntasticToggleMode<CR>
