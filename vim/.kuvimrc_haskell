filetype plugin indent on

" [ eagletmt/ghcmod-vim ] {{{1

au BufEnter *.hs nnoremap <leader>st :GhcModType<CR>
au BufEnter *.hs nnoremap <leader>ct :GhcModTypeClear<CR>
au BufEnter *.hs nnoremap <leader>it :GhcModTypeInsert<CR>
au BufEnter *.hs nnoremap <leader>si :GhcModInfo<CR>
au BufEnter *.hs nnoremap <leader>pi :GhcModInfoPreview<CR>
au BufEnter *.hs nnoremap <leader>sc :GhcModSplitFunCase<CR>
au BufEnter *.hs nnoremap <leader>c :GhcModCheck<CR>
au BufEnter *.hs nnoremap <leader>l :GhcModLint<CR>

" [ eagletmt/neco-ghc ] {{{1

let g:SuperTabDefaultCompletionType = '<c-x><c-o>'
if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif
" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc=0
" Very useful, but can make it rather slow
let g:necoghc_enable_detailed_browse=1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" [ scrooloose/syntastic ] {{{1

if has( "gui_running" )
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endif

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=0
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0

map <silent> <Leader>e :Errors<CR>
map <Leader>s :SyntasticToggleMode<CR>
