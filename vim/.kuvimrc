" Roman Kuznetsov's profile settings

" NeoBundle {{{1
if has('win32')
  let s:rc_raw = expand("$HOME/vimfiles/bundle/neobundle.vim")
  let s:rc = substitute(s:rc_raw, "\\", "/", "g")
elseif has('unix')
  let s:rc = expand("$HOME/.vim/bundle/neobundle.vim")
endif
if !isdirectory(s:rc)
  execute ':silent !git clone https://github.com/Shougo/neobundle.vim "'.s:rc.'"'
endif
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif
if &compatible
  set nocompatible
endif
if has('win32')
  set runtimepath^=$HOME/vimfiles/bundle/neobundle.vim/
  call neobundle#begin(expand('$HOME/vimfiles/bundle/'))
elseif has('unix')
  set runtimepath^=$HOME/.vim/bundle/neobundle.vim/
  call neobundle#begin(expand('$HOME/.vim/bundle/'))
endif
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
" [ GENERAL ]
NeoBundle 'mbbill/fencview'
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': 'make'}}
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
" [ COLOR SCHEMES ]
NeoBundle 'kuznero/kuvim-themes'
NeoBundle 'chriskempson/base16-vim'
" [ C# ]
NeoBundle 'csharp.vim'
" [ F# ]
NeoBundle 'fsharp/vim-fsharp', {
           \ 'description': 'F# support for Vim',
           \ 'lazy': 1,
           \ 'autoload': {'filetypes': 'fsharp'},
           \ 'build': {
           \   'unix':  'make fsautocomplete',
           \ },
           \ 'build_commands': ['curl', 'make', 'mozroots', 'touch', 'unzip'],
           \}
" [ PowerShell ]
NeoBundle 'PProvost/vim-ps1'
" " [ Haskell ]
NeoBundle 'scrooloose/syntastic'
" NeoBundle 'eagletmt/ghcmod-vim'
" NeoBundle 'eagletmt/neco-ghc'
" NeoBundle 'ervandew/supertab'
" [ Elm ]
NeoBundle 'ElmCast/elm-vim'
call neobundle#end()
filetype plugin indent on
" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" CtrlP {{{1
let g:ctrlp_cmd = 'CtrlPCurWD'
let g:ctrlp_show_hidden = 1
let g:ctrlp_path_nolim = 1
if has('win32')
  set wildignore+=*\\.stack-work\\*
else
  set wildignore+=*/.stack-work/*
endif

" General {{{1
" enable filetype detection, plus loading of filetype plugins
filetype plugin indent on
" automatically enable mouse usage
set mouse=a
" setup various encodings
" scriptencoding utf-8
set encoding=utf-8
set fileencodings=utf-8
" store bigger history (default is 20)
set history=1000
" disable spell checking
set nospell
" set spell spelllang=en
" disable backups
set nobackup
" disable swap files
set noswapfile
" disable undo files
set noundofile
" text width
set textwidth=0
set colorcolumn=0
" " open new buffers to the right and below current buffer
" set splitright
" set splitbelow
" allow buffers to go to the background even if they are unsaved
set hidden

" UI {{{1
" gui specific settings
if has("gui_running")
  " enable current line highlight
  set nocursorline
  " set window size explicitly
  set columns=130
  set lines=30
  " " remove menu bar
  set guioptions-=m
  " remove toolbar
  set guioptions-=T
  " remove scroll bars
  set guioptions-=r
  set guioptions-=L
endif
" display the current mode
set showmode
" always show status line
set laststatus=2
" backspace for dummys
set backspace=indent,eol,start
" no extra spaces between rows
set linespace=1
" line numbers on
set number
" show matching brackets/parenthesis
set showmatch
" find as you type search
set incsearch
" highlight search terms
set hlsearch
" case insensitive search
set ignorecase
" case sensitive when uc present
set smartcase
" fold method
set foldmethod=marker
" auto fold enabled
set nofoldenable
" show list characters
set listchars=tab:•\ ,trail:•,extends:»,precedes:« 
set list
"set linebreak
set showbreak=>>\ 

" Formatting {{{1
" wrap long lines
set nowrap
" indent at the same level of the previous line
set autoindent
" enable smart indent
set smartindent
" use indents of 2 spaces
set shiftwidth=2
" tabs are spaces, not tabs
set expandtab
" an indentation every second columns
set tabstop=2
" let backspace delete indent
set softtabstop=2

" Diff {{{1
" disregard whitespaces on file diff
" set diffopt+=iwhite

" Elm Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_elm" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Markdown Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_markdown" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Xml Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_xml" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Mapping Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_mapping" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif

" Style Include {{{1
let s:rc = expand( "$HOME/.kuvimrc_style" )
if filereadable( s:rc )
  execute ':source '.s:rc
endif
